/*
   Generated by EX4-TO-MQ4 decompiler V4.0.224.1 []
   Website: http://purebeam.biz
   E-mail : purebeam@gmail.com
*/
#property copyright "Copyright © 2009, IVYBOT Company"
#property link      "http://www.IVYBOT.com"

extern double lots = 0.1;
extern double trailingStop = 0.0;
extern double takeProfit = 90.0;
extern bool risk_management = TRUE;
extern double equitypercent = 0.02;
extern double stopLoss = 0.0;
extern double slippage = 3.0;
extern double dds_delay = 72800.0;
extern bool PowerTrend = TRUE;
extern double PM_Adjust = 1.6982;
extern bool Max_Deviation = TRUE;
extern bool Ivy_Trend = TRUE;
extern bool Testmode = FALSE;
extern string ClickbankCode = "000";
extern double Pin_under = 8.0;
extern double Long_cut = 3.0;
extern double crmRPM = 14.0;
extern double Pound_level = 60.0;
extern double Dscan = 20.0;
extern double Hscan = 10.0;
extern double magicn = 16384.0;
extern int ATRS = 5;
extern int ATR_PERIOD = 8;
extern string nameEA = "IVYBOT_USD_JPY";
double g_ima_336;
double g_ima_344;
double g_iadx_480;
double g_iadx_488;
double g_iatr_496;
double g_iadx_504;
double g_iadx_512;
double g_iadx_520;
double g_iadx_528;
double gd_536;
double gd_544;
double gd_552;
double gd_560;
double g_ima_568;
bool g_bool_576 = FALSE;
bool g_bool_580 = FALSE;
bool gi_unused_584 = FALSE;
int g_pos_588;
int g_ticket_592;
int gi_596;
int g_str_len_600;
int gi_604 = 8;
double g_iatr_608;
double g_pips_616;
double gd_624;
double gd_632;
double g_maxlot_640;
double g_minlot_648;
double gd_656;
double gd_664;

int init() {
   if (Digits == 3 || Digits == 5) {
      trailingStop = 10.0 * trailingStop;
      takeProfit = 10.0 * takeProfit;
      slippage = 10.0 * slippage;
      stopLoss = 10.0 * stopLoss;
      Dscan = 10.0 * (Dscan * Point);
      Hscan = 10.0 * (Hscan * Point);
      gi_596 = 5;
      gd_656 = 1000;
      gd_664 = 1;
   }
   if (Digits != 3 && Digits != 5) {
      Dscan *= Point;
      Hscan *= Point;
      gi_596 = 4;
      gd_656 = 100;
      gd_664 = 10;
   }
   return (0);
}

int deinit() {
   return (0);
}

int start() {
   calculateIndicators();
  
  /* g_str_len_600 = StringLen(ClickbankCode);
   if (g_str_len_600 > gi_604 || g_str_len_600 < gi_604) {
      Comment("Trade on Account: " + AccountNumber() + "NOT AUTHORIZED BY IVYBOT!");
      return (0);
   }*/
   
   Comment("");
   if (Period() != PERIOD_H1) {
      Comment("Must be 1H Chart!");
      return (0);
   }
   Comment("");
   Display_Info();
   if (Bars < 100) {
      Print("Not enough bars for this strategy - ", nameEA);
      return (-1);
   }
   g_maxlot_640 = MarketInfo("USDJPY", MODE_MAXLOT);
   g_minlot_648 = MarketInfo("USDJPY", MODE_MINLOT);
   if (risk_management == TRUE) calculatelots();
   int l_ord_total_0 = OrdersTotal();
   int l_count_4 = 0;
   for (g_pos_588 = 0; g_pos_588 < l_ord_total_0; g_pos_588++) {
      OrderSelect(g_pos_588, SELECT_BY_POS);
      if (OrderSymbol() == Symbol() && OrderType() <= OP_SELL && OrderComment() == nameEA) {
         l_count_4++;
         if (OrderType() == OP_BUY) {
            if (TimeCurrent() - OrderOpenTime() > dds_delay) {
               OrderClose(OrderTicket(), OrderLots(), Bid, slippage, Violet);
               prtAlert("IVYBOT_USD_JPY: Closing BUY order");
            }
            if (trailingStop > 0.0) {
               if (Bid - OrderOpenPrice() > trailingStop * Point)
                  if (OrderStopLoss() < Bid - trailingStop * Point) OrderModify(OrderTicket(), OrderOpenPrice(), Bid - trailingStop * Point, OrderTakeProfit(), 0, Blue);
            }
         } else {
            if (TimeCurrent() - OrderOpenTime() > dds_delay) {
               OrderClose(OrderTicket(), OrderLots(), Ask, slippage, Violet);
               prtAlert("IVYBOT_USD_JPY: Closing SELL order");
            }
            if (trailingStop > 0.0) {
               if (OrderOpenPrice() - Ask > trailingStop * Point)
                  if (OrderStopLoss() == 0.0 || OrderStopLoss() > Ask + trailingStop * Point) OrderModify(OrderTicket(), OrderOpenPrice(), Ask + trailingStop * Point, OrderTakeProfit(), 0, Red);
            }
         }
      }
   }
   if (l_count_4 < 1) {
      if (AccountFreeMargin() < 1000.0 * lots) {
         Print("Not enough money to trade ", lots, " lots. Strategy:", nameEA);
         return (0);
      }
      if (g_bool_576 && !g_bool_580) {
         if (risk_management == TRUE) gd_544 = Ask - g_pips_616 * Point;
         else
            if (stopLoss > 0.0) gd_544 = Ask - stopLoss * Point;
         if (takeProfit > 0.0) gd_536 = Ask + takeProfit * Point;
         g_ticket_592 = OrderSend(Symbol(), OP_BUY, lots, Ask, slippage, 0, 0, nameEA, magicn, 0, Red);
         if (g_ticket_592 < 0) {
            Print("OrderSend (", nameEA, ") failed with error #", GetLastError());
            prtAlert("IVYBOT_USD_JPY: Buying");
         } else {
            if (NormalizeDouble(OrderTakeProfit(), gi_596) != NormalizeDouble(Ask + takeProfit * Point, gi_596)) OrderModify(g_ticket_592, OrderOpenPrice(), 0, Ask + takeProfit * Point, 0, Blue);
            if (risk_management == TRUE) {
               if (NormalizeDouble(OrderStopLoss(), gi_596) != NormalizeDouble(Ask - g_pips_616 * Point, gi_596)) OrderModify(g_ticket_592, OrderOpenPrice(), Ask - g_pips_616 * Point, Ask + takeProfit * Point, 0, Blue);
            } else {
               if (stopLoss > 0.0)
                  if (NormalizeDouble(OrderStopLoss(), gi_596) != NormalizeDouble(Ask - stopLoss * Point, gi_596)) OrderModify(g_ticket_592, OrderOpenPrice(), Ask - stopLoss * Point, Ask + takeProfit * Point, 0, Blue);
            }
         }
      }
      if (g_bool_580 && !g_bool_576) {
         if (risk_management == TRUE) gd_544 = Bid + g_pips_616 * Point;
         else
            if (stopLoss > 0.0) gd_544 = Bid + stopLoss * Point;
         if (takeProfit > 0.0) gd_536 = Bid - takeProfit * Point;
         g_ticket_592 = OrderSend(Symbol(), OP_SELL, lots, Bid, slippage, 0, 0, nameEA, magicn, 0, Red);
         if (g_ticket_592 < 0) {
            Print("OrderSend (", nameEA, ") failed with error #", GetLastError());
            prtAlert("IVYBOT_USD_JPY: Selling");
         } else {
            if (NormalizeDouble(OrderTakeProfit(), gi_596) != NormalizeDouble(Bid - takeProfit * Point, gi_596)) OrderModify(g_ticket_592, OrderOpenPrice(), 0, Bid - takeProfit * Point, 0, Blue);
            if (risk_management == TRUE) {
               if (NormalizeDouble(OrderStopLoss(), gi_596) != NormalizeDouble(Bid + g_pips_616 * Point, gi_596)) OrderModify(g_ticket_592, OrderOpenPrice(), Bid + g_pips_616 * Point, Bid - takeProfit * Point, 0, Blue);
            } else {
               if (stopLoss > 0.0)
                  if (NormalizeDouble(OrderStopLoss(), gi_596) != NormalizeDouble(Bid + stopLoss * Point, gi_596)) OrderModify(g_ticket_592, OrderOpenPrice(), Bid + stopLoss * Point, Bid - takeProfit * Point, 0, Blue);
            }
         }
      }
   }
   return (0);
}

void calculateIndicators() {
   g_iatr_608 = iATR(NULL, 0, ATR_PERIOD, 1);
   g_pips_616 = NormalizeDouble(g_iatr_608 * ATRS, gi_596);
   g_ima_336 = iMA(NULL, 0, 13, 0, MODE_EMA, PRICE_CLOSE, 8);
   g_ima_344 = iMA(NULL, 0, 13, 0, MODE_EMA, PRICE_CLOSE, 0);
   g_iadx_480 = iADX(NULL, 0, crmRPM, PRICE_CLOSE, MODE_MAIN, 1);
   g_iadx_488 = iADX(NULL, 0, crmRPM, PRICE_CLOSE, MODE_MAIN, 2);
   g_iadx_504 = iADX(NULL, 0, crmRPM, PRICE_CLOSE, MODE_PLUSDI, 1);
   g_iadx_512 = iADX(NULL, 0, crmRPM, PRICE_CLOSE, MODE_PLUSDI, 2);
   g_iadx_528 = iADX(NULL, 0, crmRPM, PRICE_CLOSE, MODE_MINUSDI, 1);
   g_iadx_520 = iADX(NULL, 0, crmRPM, PRICE_CLOSE, MODE_MINUSDI, 2);
   g_iatr_496 = iATR(NULL, 0, 50, 0);
   gd_552 = iMA(NULL, PERIOD_D1, Pin_under, 0, MODE_EMA, PRICE_MEDIAN, 0) - iMA(NULL, PERIOD_D1, Pin_under, 0, MODE_EMA, PRICE_MEDIAN, Long_cut);
   gd_560 = iMA(NULL, PERIOD_H4, Pin_under, 0, MODE_EMA, PRICE_MEDIAN, 0) - iMA(NULL, PERIOD_H4, Pin_under, 0, MODE_EMA, PRICE_MEDIAN, Long_cut);
   g_ima_568 = iMA(NULL, PERIOD_H1, Pound_level, 0, MODE_EMA, PRICE_MEDIAN, 0);
   g_bool_576 = gd_552 > Dscan && gd_560 > Hscan && g_ima_568 > Ask && DayOfWeek() < 5;
   g_bool_580 = gd_552 < (-1.0 * Dscan) && gd_560 < (-1.0 * Hscan) && g_ima_568 && DayOfWeek() < 5;
   gi_unused_584 = FALSE;
}

void prtAlert(string as_0 = "") {
   Print(as_0);
   Alert(as_0);
}

double calculatelots() {
   g_pips_616 = MathAbs(g_pips_616);
   g_pips_616 *= gd_656;
   gd_624 = equitypercent * AccountEquity();
   gd_632 = gd_624 / g_pips_616;
   lots = gd_632 / gd_664;
   if (lots < 10.0) {
      if (lots > 0.01 && lots < 0.02) lots = 0.01;
      if (lots > 0.02 && lots < 0.03) lots = 0.02;
      if (lots > 0.03 && lots < 0.04) lots = 0.03;
      if (lots > 0.04 && lots < 0.05) lots = 0.04;
      if (lots > 0.05 && lots < 0.06) lots = 0.05;
      if (lots > 0.06 && lots < 0.07) lots = 0.06;
      if (lots > 0.07 && lots < 0.08) lots = 0.07;
      if (lots > 0.08 && lots < 0.09) lots = 0.08;
      if (lots > 0.09 && lots < 0.1) lots = 0.09;
      if (lots > 0.1 && lots < 0.2) lots = 0.1;
      if (lots > 0.2 && lots < 0.3) lots = 0.2;
      if (lots > 0.3 && lots < 0.4) lots = 0.3;
      if (lots > 0.4 && lots < 0.5) lots = 0.4;
      if (lots > 0.5 && lots < 0.6) lots = 0.5;
      if (lots > 0.6 && lots < 0.7) lots = 0.6;
      if (lots > 0.7 && lots < 0.8) lots = 0.7;
      if (lots > 0.8 && lots < 0.9) lots = 0.8;
      if (lots > 0.9 && lots < 1.0) lots = 0.9;
      if (lots > 1.0 && lots < 1.1) lots = 1.0;
      if (lots > 1.1 && lots < 1.2) lots = 1.1;
      if (lots > 1.2 && lots < 1.3) lots = 1.2;
      if (lots > 1.3 && lots < 1.4) lots = 1.3;
      if (lots > 1.4 && lots < 1.5) lots = 1.4;
      if (lots > 1.5 && lots < 1.6) lots = 1.5;
      if (lots > 1.6 && lots < 1.7) lots = 1.6;
      if (lots > 1.7 && lots < 1.8) lots = 1.7;
      if (lots > 1.8 && lots < 1.9) lots = 1.8;
      if (lots > 1.9 && lots < 2.0) lots = 1.9;
      if (lots > 2.0 && lots < 2.1) lots = 2.0;
      if (lots > 2.1 && lots < 2.2) lots = 2.1;
      if (lots > 2.2 && lots < 2.3) lots = 2.2;
      if (lots > 2.3 && lots < 2.4) lots = 2.3;
      if (lots > 2.4 && lots < 2.5) lots = 2.4;
      if (lots > 2.5 && lots < 2.6) lots = 2.5;
      if (lots > 2.6 && lots < 2.7) lots = 2.6;
      if (lots > 2.7 && lots < 2.8) lots = 2.7;
      if (lots > 2.8 && lots < 2.9) lots = 2.8;
      if (lots > 2.9 && lots < 3.0) lots = 2.9;
      if (lots > 3.0 && lots < 3.1) lots = 3.0;
      if (lots > 3.1 && lots < 3.2) lots = 3.1;
      if (lots > 3.2 && lots < 3.3) lots = 3.2;
      if (lots > 3.3 && lots < 3.4) lots = 3.3;
      if (lots > 3.4 && lots < 3.5) lots = 3.4;
      if (lots > 3.5 && lots < 3.6) lots = 3.5;
      if (lots > 3.6 && lots < 3.7) lots = 3.6;
      if (lots > 3.7 && lots < 3.8) lots = 3.7;
      if (lots > 3.8 && lots < 3.9) lots = 3.8;
      if (lots > 3.9 && lots < 4.0) lots = 3.9;
      if (lots > 4.0 && lots < 4.1) lots = 4.0;
      if (lots > 4.1 && lots < 4.2) lots = 4.1;
      if (lots > 4.2 && lots < 4.3) lots = 4.2;
      if (lots > 4.3 && lots < 4.4) lots = 4.3;
      if (lots > 4.4 && lots < 4.5) lots = 4.4;
      if (lots > 4.5 && lots < 4.6) lots = 4.5;
      if (lots > 4.6 && lots < 4.7) lots = 4.6;
      if (lots > 4.7 && lots < 4.8) lots = 4.7;
      if (lots > 4.8 && lots < 4.9) lots = 4.8;
      if (lots > 4.9 && lots < 5.0) lots = 4.9;
      if (lots > 5.0 && lots < 5.1) lots = 5.0;
      if (lots > 5.1 && lots < 5.2) lots = 5.1;
      if (lots > 5.2 && lots < 5.3) lots = 5.2;
      if (lots > 5.3 && lots < 5.4) lots = 5.3;
      if (lots > 5.4 && lots < 5.5) lots = 5.4;
      if (lots > 5.5 && lots < 5.6) lots = 5.5;
      if (lots > 5.6 && lots < 5.7) lots = 5.6;
      if (lots > 5.7 && lots < 5.8) lots = 5.7;
      if (lots > 5.8 && lots < 5.9) lots = 5.8;
      if (lots > 5.9 && lots < 6.0) lots = 5.9;
      if (lots > 6.0 && lots < 6.1) lots = 6.0;
      if (lots > 6.1 && lots < 6.2) lots = 6.1;
      if (lots > 6.2 && lots < 6.3) lots = 6.2;
      if (lots > 6.3 && lots < 6.4) lots = 6.3;
      if (lots > 6.4 && lots < 6.5) lots = 6.4;
      if (lots > 6.5 && lots < 6.6) lots = 6.5;
      if (lots > 6.6 && lots < 6.7) lots = 6.6;
      if (lots > 6.7 && lots < 6.8) lots = 6.7;
      if (lots > 6.8 && lots < 6.9) lots = 6.8;
      if (lots > 6.9 && lots < 7.0) lots = 6.9;
      if (lots > 7.0 && lots < 7.1) lots = 7.0;
      if (lots > 7.1 && lots < 7.2) lots = 7.1;
      if (lots > 7.2 && lots < 7.3) lots = 7.2;
      if (lots > 7.3 && lots < 7.4) lots = 7.3;
      if (lots > 7.4 && lots < 7.5) lots = 7.4;
      if (lots > 7.5 && lots < 7.6) lots = 7.5;
      if (lots > 7.6 && lots < 7.7) lots = 7.6;
      if (lots > 7.7 && lots < 7.8) lots = 7.7;
      if (lots > 7.8 && lots < 7.9) lots = 7.8;
      if (lots > 7.9 && lots < 8.0) lots = 7.9;
      if (lots > 8.0 && lots < 8.1) lots = 8.0;
      if (lots > 8.1 && lots < 8.2) lots = 8.1;
      if (lots > 8.2 && lots < 8.3) lots = 8.2;
      if (lots > 8.3 && lots < 8.4) lots = 8.3;
      if (lots > 8.4 && lots < 8.5) lots = 8.4;
      if (lots > 8.5 && lots < 8.6) lots = 8.5;
      if (lots > 8.6 && lots < 8.7) lots = 8.6;
      if (lots > 8.7 && lots < 8.8) lots = 8.7;
      if (lots > 8.8 && lots < 8.9) lots = 8.8;
      if (lots > 8.9 && lots < 9.0) lots = 8.9;
      if (lots > 9.0 && lots < 9.1) lots = 9.0;
      if (lots > 9.1 && lots < 9.2) lots = 9.1;
      if (lots > 9.2 && lots < 9.3) lots = 9.2;
      if (lots > 9.3 && lots < 9.4) lots = 9.3;
      if (lots > 9.4 && lots < 9.5) lots = 9.4;
      if (lots > 9.5 && lots < 9.6) lots = 9.5;
      if (lots > 9.6 && lots < 9.7) lots = 9.6;
      if (lots > 9.7 && lots < 9.8) lots = 9.7;
      if (lots > 9.8 && lots < 9.9) lots = 9.8;
      if (lots > 9.9 && lots < 10.0) lots = 9.9;
      if (lots > 10.0 && lots < 10.1) lots = 10.0;
      if (lots > 10.0) lots = MathRound(lots);
      if (lots > g_maxlot_640) lots = g_maxlot_640;
      if (lots < g_minlot_648) lots = g_minlot_648;
   }
   return (lots);
}

void Display_Info() {
   Comment("IVYBOT EXPERT ADVISOR\n", "Desc: Currently Scanning All Trends,\n", "Forex Account Server:", AccountServer(), 
      "\n", "Free Margin:  $", AccountFreeMargin(), 
      "\n", "Lots:  ", lots, 
      "\n", "Symbol: ", Symbol(), 
      "\n", "Price:  ", NormalizeDouble(Bid, 4), 
      "\n", "Optimal Spread:  ", MarketInfo("USDJPY", MODE_SPREAD), 
      "\n", "Date: ", Month(), "-", Day(), "-", Year(), " Server Time: ", Hour(), ":", Minute(), ":", Seconds(), 
   "\n");
}