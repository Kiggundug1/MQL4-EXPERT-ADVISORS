/*
   Generated by EX4-TO-MQ4 decompiler V4.0.224.1 []
   Website: http://purebeam.biz
   E-mail : purebeam@gmail.com
*/
#property copyright "Copyright © 2009, IVYBOT Company"
#property link      "http://www.IVYBOT.com"

extern double lots = 0.1;
extern double trailingStop = 0.0;
extern double takeProfit = 110.0;
extern bool risk_management = TRUE;
extern double equitypercent = 0.02;
extern double stopLoss = 0.0;
extern double slippage = 3.0;
extern double dds_delay = 64800.0;
extern bool PowerTrend = TRUE;
extern double PM_Adjust = 1.6982;
extern bool Max_Deviation = TRUE;
extern bool Ivy_Trend = TRUE;
extern bool Testmode = FALSE;
extern string ClickbankCode = "000";
extern double Pin_under = 7.0;
extern double Long_Cut = 3.0;
extern double crmRPM = 21.0;
extern double Pound_Level = 4.0;
extern double Dscan = 30.0;
extern double Hscan = 10.0;
extern double magicn = 16384.0;
extern string nameEA = "IVYBOT_EUR_JPY";
extern int ATRS = 2;
extern int ATR_PERIOD = 14;
double g_ima_240;
double g_ima_248;
double g_iadx_272;
double g_iadx_280;
double g_iatr_288;
double g_iadx_296;
double g_iadx_304;
double g_iadx_312;
double g_iadx_320;
double gd_328;
double gd_336;
double gd_344;
double gd_352;
double g_ima_360;
bool g_bool_368 = FALSE;
bool g_bool_372 = FALSE;
bool gi_unused_376 = FALSE;
int g_pos_380;
int g_ticket_384;
int gi_388;
int g_str_len_392;
int gi_396 = 8;
double g_iatr_400;
double gd_408;
double gd_416;
double gd_424;
double g_maxlot_432;
double g_minlot_440;
double gd_448;
double gd_456;

int init() {
   if (Digits == 3 || Digits == 5) {
      trailingStop = 10.0 * trailingStop;
      takeProfit = 10.0 * takeProfit;
      slippage = 10.0 * slippage;
      stopLoss = 10.0 * stopLoss;
      Dscan = 10.0 * (Dscan * Point);
      Hscan = 10.0 * (Hscan * Point);
      gi_388 = 5;
      gd_448 = 1000;
      gd_456 = 1;
   }
   if (Digits != 3 && Digits != 5) {
      Dscan *= Point;
      Hscan *= Point;
      gi_388 = 4;
      gd_448 = 100;
      gd_456 = 10;
   }
   return (0);
}

int deinit() {
   return (0);
}

int start() {
   calculateIndicators();
   
 /*g_str_len_392 = StringLen(ClickbankCode);
   if (g_str_len_392 > gi_396 || g_str_len_392 < gi_396) {
      Comment("Trade on Account: " + AccountNumber() + "NOT AUTHORIZED BY IVYBOT!");
      return (0);
   }
 */  
   Comment("");
   if (Period() != PERIOD_H1) {
      Comment("Must be 1H Chart!");
      return (0);
   }
   Comment("");
   Display_Info();
   if (Bars < 100) {
      Print("Not enough bars to run this strategy - ", nameEA);
      return (-1);
   }
   g_maxlot_432 = MarketInfo(Symbol(), MODE_MAXLOT);
   g_minlot_440 = MarketInfo(Symbol(), MODE_MINLOT);
   if (risk_management == TRUE) calculatelots();
   int l_ord_total_0 = OrdersTotal();
   int l_count_4 = 0;
   double l_tickvalue_8 = MarketInfo(Symbol(), MODE_TICKVALUE);
   for (g_pos_380 = 0; g_pos_380 < l_ord_total_0; g_pos_380++) {
      OrderSelect(g_pos_380, SELECT_BY_POS);
      if (OrderSymbol() == Symbol() && OrderType() <= OP_SELL && OrderComment() == nameEA) {
         l_count_4++;
         if (OrderType() == OP_BUY) {
            if (TimeCurrent() - OrderOpenTime() > dds_delay) {
               OrderClose(OrderTicket(), OrderLots(), Bid, slippage, Violet);
               prtAlert("IVYBOT_EUR_JPY: Closing BUY order");
            }
            if (trailingStop > 0.0) {
               if (Bid - OrderOpenPrice() > trailingStop * Point)
                  if (OrderStopLoss() < Bid - trailingStop * Point) OrderModify(OrderTicket(), OrderOpenPrice(), Bid - trailingStop * Point, OrderTakeProfit(), 0, Blue);
            }
         } else {
            if (TimeCurrent() - OrderOpenTime() > dds_delay) {
               OrderClose(OrderTicket(), OrderLots(), Ask, slippage, Violet);
               prtAlert("IVYBOT_EUR_JPY: Closing SELL order");
            }
            if (trailingStop > 0.0) {
               if (OrderOpenPrice() - Ask > trailingStop * Point)
                  if (OrderStopLoss() == 0.0 || OrderStopLoss() > Ask + trailingStop * Point) OrderModify(OrderTicket(), OrderOpenPrice(), Ask + trailingStop * Point, OrderTakeProfit(), 0, Red);
            }
         }
      }
   }
   if (l_count_4 < 1) {
      if (AccountFreeMargin() < 1000.0 * lots) {
         Print("Not enough money to trade ", lots, " lots. Strategy:", nameEA);
         return (0);
      }
      if (g_bool_368 && !g_bool_372) {
         if (risk_management == TRUE) gd_336 = Ask - gd_408 * Point;
         else
            if (stopLoss > 0.0) gd_336 = Ask - stopLoss * Point;
         if (takeProfit > 0.0) gd_328 = Ask + takeProfit * Point;
         g_ticket_384 = OrderSend(Symbol(), OP_BUY, lots, Ask, slippage, 0, 0, nameEA, magicn, 0, Red);
         Print("Lots (", lots, ")");
         Print("ATR_PLUG (", gd_408, ")");
         Print("riskperpip (", gd_424, ")");
         Print("dollarrisk (", gd_416, ")");
         Print("equitypercent (", equitypercent, ")");
         Print("Acount Equity (", AccountEquity(), ")");
         Print("maxlots (", g_maxlot_432, ")");
         Print("minlots (", g_minlot_440, ")");
         Print("tickvalue (", l_tickvalue_8, ")");
         if (g_ticket_384 < 0) {
            Print("OrderSend (", nameEA, ") failed with error #", GetLastError());
            prtAlert("IVYBOT_EUR_JPY: Buying");
         } else {
            if (NormalizeDouble(OrderTakeProfit(), gi_388) != NormalizeDouble(Ask + takeProfit * Point, gi_388)) OrderModify(g_ticket_384, OrderOpenPrice(), 0, Ask + takeProfit * Point, 0, Blue);
            if (risk_management == TRUE) {
               if (NormalizeDouble(OrderStopLoss(), gi_388) != NormalizeDouble(Ask - gd_408 * Point, gi_388)) OrderModify(g_ticket_384, OrderOpenPrice(), Ask - gd_408 * Point, Ask + takeProfit * Point, 0, Blue);
            } else {
               if (stopLoss > 0.0)
                  if (NormalizeDouble(OrderStopLoss(), gi_388) != NormalizeDouble(Ask - stopLoss * Point, gi_388)) OrderModify(g_ticket_384, OrderOpenPrice(), Ask - stopLoss * Point, Ask + takeProfit * Point, 0, Blue);
            }
         }
      }
      if (g_bool_372 && !g_bool_368) {
         if (risk_management == TRUE) gd_336 = Bid + gd_408 * Point;
         else
            if (stopLoss > 0.0) gd_336 = Bid + stopLoss * Point;
         if (takeProfit > 0.0) gd_328 = Bid - takeProfit * Point;
         g_ticket_384 = OrderSend(Symbol(), OP_SELL, lots, Bid, slippage, 0, 0, nameEA, magicn, 0, Red);
         Print("Lots (", lots, ")");
         Print("ATR_PLUG (", gd_408, ")");
         Print("riskperpip (", gd_424, ")");
         Print("dollarrisk (", gd_416, ")");
         Print("equitypercent (", equitypercent, ")");
         Print("Acount Equity (", AccountEquity(), ")");
         Print("maxlots (", g_maxlot_432, ")");
         Print("minlots (", g_minlot_440, ")");
         Print("tickvalue (", l_tickvalue_8, ")");
         if (g_ticket_384 < 0) {
            Print("OrderSend (", nameEA, ") failed with error #", GetLastError());
            prtAlert("IVYBOT_EUR_JPY: Selling");
         } else {
            if (NormalizeDouble(OrderTakeProfit(), gi_388) != NormalizeDouble(Bid - takeProfit * Point, gi_388)) OrderModify(g_ticket_384, OrderOpenPrice(), 0, Bid - takeProfit * Point, 0, Blue);
            if (risk_management == TRUE) {
               if (NormalizeDouble(OrderStopLoss(), gi_388) != NormalizeDouble(Bid + gd_408 * Point, gi_388)) OrderModify(g_ticket_384, OrderOpenPrice(), Bid + gd_408 * Point, Bid - takeProfit * Point, 0, Blue);
            } else {
               if (stopLoss > 0.0)
                  if (NormalizeDouble(OrderStopLoss(), gi_388) != NormalizeDouble(Bid + stopLoss * Point, gi_388)) OrderModify(g_ticket_384, OrderOpenPrice(), Bid + stopLoss * Point, Bid - takeProfit * Point, 0, Blue);
            }
         }
      }
   }
   return (0);
}

void calculateIndicators() {
   g_iatr_400 = iATR(NULL, 0, ATR_PERIOD, 1);
   gd_408 = NormalizeDouble(g_iatr_400 * ATRS, gi_388);
   g_ima_240 = iMA(NULL, 0, 13, 0, MODE_EMA, PRICE_CLOSE, 8);
   g_ima_248 = iMA(NULL, 0, 13, 0, MODE_EMA, PRICE_CLOSE, 0);
   g_iadx_272 = iADX(NULL, PERIOD_D1, crmRPM, PRICE_CLOSE, MODE_MAIN, 1);
   g_iadx_280 = iADX(NULL, PERIOD_D1, crmRPM, PRICE_CLOSE, MODE_MAIN, 2);
   g_iadx_296 = iADX(NULL, PERIOD_D1, crmRPM, PRICE_CLOSE, MODE_PLUSDI, 1);
   g_iadx_304 = iADX(NULL, PERIOD_D1, crmRPM, PRICE_CLOSE, MODE_PLUSDI, 2);
   g_iadx_320 = iADX(NULL, PERIOD_D1, crmRPM, PRICE_CLOSE, MODE_MINUSDI, 1);
   g_iadx_312 = iADX(NULL, PERIOD_D1, crmRPM, PRICE_CLOSE, MODE_MINUSDI, 2);
   g_iatr_288 = iATR(NULL, 0, 50, 0);
   gd_344 = iMA(NULL, PERIOD_D1, Pin_under, 0, MODE_EMA, PRICE_MEDIAN, 0) - iMA(NULL, PERIOD_D1, Pin_under, 0, MODE_EMA, PRICE_MEDIAN, Long_Cut);
   gd_352 = iMA(NULL, PERIOD_H4, Pin_under, 0, MODE_EMA, PRICE_MEDIAN, 0) - iMA(NULL, PERIOD_H4, Pin_under, 0, MODE_EMA, PRICE_MEDIAN, Long_Cut);
   g_ima_360 = iMA(NULL, PERIOD_H1, Pound_Level, 0, MODE_EMA, PRICE_MEDIAN, 0);
   g_bool_368 = gd_344 > Dscan && gd_352 > Hscan && g_ima_360 > Ask && g_iatr_288 < 0.9 && g_iadx_272 > 40.0 && g_iadx_272 < 55.0 && g_iadx_280 < 55.0 && DayOfWeek() < 5;
   g_bool_372 = gd_344 < (-1.0 * Dscan) && gd_352 < (-1.0 * Hscan) && g_ima_360 < Bid && g_iatr_288 < 0.9 && g_iadx_272 > 40.0 && g_iadx_272 < 55.0 && g_iadx_280 < 55.0 && DayOfWeek() < 5;
   gi_unused_376 = FALSE;
}

void prtAlert(string as_0 = "") {
   Print(as_0);
   Alert(as_0);
}

double calculatelots() {
   gd_408 *= gd_448;
   gd_416 = equitypercent * AccountEquity();
   gd_424 = gd_416 / gd_408;
   lots = gd_424 / gd_456;
   if (lots < 10.0) {
      if (lots > 0.01 && lots < 0.02) lots = 0.01;
      if (lots > 0.02 && lots < 0.03) lots = 0.02;
      if (lots > 0.03 && lots < 0.04) lots = 0.03;
      if (lots > 0.04 && lots < 0.05) lots = 0.04;
      if (lots > 0.05 && lots < 0.06) lots = 0.05;
      if (lots > 0.06 && lots < 0.07) lots = 0.06;
      if (lots > 0.07 && lots < 0.08) lots = 0.07;
      if (lots > 0.08 && lots < 0.09) lots = 0.08;
      if (lots > 0.09 && lots < 0.1) lots = 0.09;
      if (lots > 0.1 && lots < 0.2) lots = 0.1;
      if (lots > 0.2 && lots < 0.3) lots = 0.2;
      if (lots > 0.3 && lots < 0.4) lots = 0.3;
      if (lots > 0.4 && lots < 0.5) lots = 0.4;
      if (lots > 0.5 && lots < 0.6) lots = 0.5;
      if (lots > 0.6 && lots < 0.7) lots = 0.6;
      if (lots > 0.7 && lots < 0.8) lots = 0.7;
      if (lots > 0.8 && lots < 0.9) lots = 0.8;
      if (lots > 0.9 && lots < 1.0) lots = 0.9;
      if (lots > 1.0 && lots < 1.1) lots = 1.0;
      if (lots > 1.1 && lots < 1.2) lots = 1.1;
      if (lots > 1.2 && lots < 1.3) lots = 1.2;
      if (lots > 1.3 && lots < 1.4) lots = 1.3;
      if (lots > 1.4 && lots < 1.5) lots = 1.4;
      if (lots > 1.5 && lots < 1.6) lots = 1.5;
      if (lots > 1.6 && lots < 1.7) lots = 1.6;
      if (lots > 1.7 && lots < 1.8) lots = 1.7;
      if (lots > 1.8 && lots < 1.9) lots = 1.8;
      if (lots > 1.9 && lots < 2.0) lots = 1.9;
      if (lots > 2.0 && lots < 2.1) lots = 2.0;
      if (lots > 2.1 && lots < 2.2) lots = 2.1;
      if (lots > 2.2 && lots < 2.3) lots = 2.2;
      if (lots > 2.3 && lots < 2.4) lots = 2.3;
      if (lots > 2.4 && lots < 2.5) lots = 2.4;
      if (lots > 2.5 && lots < 2.6) lots = 2.5;
      if (lots > 2.6 && lots < 2.7) lots = 2.6;
      if (lots > 2.7 && lots < 2.8) lots = 2.7;
      if (lots > 2.8 && lots < 2.9) lots = 2.8;
      if (lots > 2.9 && lots < 3.0) lots = 2.9;
      if (lots > 3.0 && lots < 3.1) lots = 3.0;
      if (lots > 3.1 && lots < 3.2) lots = 3.1;
      if (lots > 3.2 && lots < 3.3) lots = 3.2;
      if (lots > 3.3 && lots < 3.4) lots = 3.3;
      if (lots > 3.4 && lots < 3.5) lots = 3.4;
      if (lots > 3.5 && lots < 3.6) lots = 3.5;
      if (lots > 3.6 && lots < 3.7) lots = 3.6;
      if (lots > 3.7 && lots < 3.8) lots = 3.7;
      if (lots > 3.8 && lots < 3.9) lots = 3.8;
      if (lots > 3.9 && lots < 4.0) lots = 3.9;
      if (lots > 4.0 && lots < 4.1) lots = 4.0;
      if (lots > 4.1 && lots < 4.2) lots = 4.1;
      if (lots > 4.2 && lots < 4.3) lots = 4.2;
      if (lots > 4.3 && lots < 4.4) lots = 4.3;
      if (lots > 4.4 && lots < 4.5) lots = 4.4;
      if (lots > 4.5 && lots < 4.6) lots = 4.5;
      if (lots > 4.6 && lots < 4.7) lots = 4.6;
      if (lots > 4.7 && lots < 4.8) lots = 4.7;
      if (lots > 4.8 && lots < 4.9) lots = 4.8;
      if (lots > 4.9 && lots < 5.0) lots = 4.9;
      if (lots > 5.0 && lots < 5.1) lots = 5.0;
      if (lots > 5.1 && lots < 5.2) lots = 5.1;
      if (lots > 5.2 && lots < 5.3) lots = 5.2;
      if (lots > 5.3 && lots < 5.4) lots = 5.3;
      if (lots > 5.4 && lots < 5.5) lots = 5.4;
      if (lots > 5.5 && lots < 5.6) lots = 5.5;
      if (lots > 5.6 && lots < 5.7) lots = 5.6;
      if (lots > 5.7 && lots < 5.8) lots = 5.7;
      if (lots > 5.8 && lots < 5.9) lots = 5.8;
      if (lots > 5.9 && lots < 6.0) lots = 5.9;
      if (lots > 6.0 && lots < 6.1) lots = 6.0;
      if (lots > 6.1 && lots < 6.2) lots = 6.1;
      if (lots > 6.2 && lots < 6.3) lots = 6.2;
      if (lots > 6.3 && lots < 6.4) lots = 6.3;
      if (lots > 6.4 && lots < 6.5) lots = 6.4;
      if (lots > 6.5 && lots < 6.6) lots = 6.5;
      if (lots > 6.6 && lots < 6.7) lots = 6.6;
      if (lots > 6.7 && lots < 6.8) lots = 6.7;
      if (lots > 6.8 && lots < 6.9) lots = 6.8;
      if (lots > 6.9 && lots < 7.0) lots = 6.9;
      if (lots > 7.0 && lots < 7.1) lots = 7.0;
      if (lots > 7.1 && lots < 7.2) lots = 7.1;
      if (lots > 7.2 && lots < 7.3) lots = 7.2;
      if (lots > 7.3 && lots < 7.4) lots = 7.3;
      if (lots > 7.4 && lots < 7.5) lots = 7.4;
      if (lots > 7.5 && lots < 7.6) lots = 7.5;
      if (lots > 7.6 && lots < 7.7) lots = 7.6;
      if (lots > 7.7 && lots < 7.8) lots = 7.7;
      if (lots > 7.8 && lots < 7.9) lots = 7.8;
      if (lots > 7.9 && lots < 8.0) lots = 7.9;
      if (lots > 8.0 && lots < 8.1) lots = 8.0;
      if (lots > 8.1 && lots < 8.2) lots = 8.1;
      if (lots > 8.2 && lots < 8.3) lots = 8.2;
      if (lots > 8.3 && lots < 8.4) lots = 8.3;
      if (lots > 8.4 && lots < 8.5) lots = 8.4;
      if (lots > 8.5 && lots < 8.6) lots = 8.5;
      if (lots > 8.6 && lots < 8.7) lots = 8.6;
      if (lots > 8.7 && lots < 8.8) lots = 8.7;
      if (lots > 8.8 && lots < 8.9) lots = 8.8;
      if (lots > 8.9 && lots < 9.0) lots = 8.9;
      if (lots > 9.0 && lots < 9.1) lots = 9.0;
      if (lots > 9.1 && lots < 9.2) lots = 9.1;
      if (lots > 9.2 && lots < 9.3) lots = 9.2;
      if (lots > 9.3 && lots < 9.4) lots = 9.3;
      if (lots > 9.4 && lots < 9.5) lots = 9.4;
      if (lots > 9.5 && lots < 9.6) lots = 9.5;
      if (lots > 9.6 && lots < 9.7) lots = 9.6;
      if (lots > 9.7 && lots < 9.8) lots = 9.7;
      if (lots > 9.8 && lots < 9.9) lots = 9.8;
      if (lots > 9.9 && lots < 10.0) lots = 9.9;
      if (lots > 10.0 && lots < 10.1) lots = 10.0;
      if (lots > 10.0) lots = MathRound(lots);
      if (lots > g_maxlot_432) lots = g_maxlot_432;
      if (lots < g_minlot_440) lots = g_minlot_440;
   }
   return (lots);
}

void Display_Info() {
   Comment("IVYBOT EXPERT ADVISOR\n", "Desc: Currently Scanning All Trends,\n", "Forex Account Server:", AccountServer(), 
      "\n", "Free Margin:  $", AccountFreeMargin(), 
      "\n", "Lots:  ", lots, 
      "\n", "Symbol: ", Symbol(), 
      "\n", "Price:  ", NormalizeDouble(Bid, 4), 
      "\n", "Optimal Spread:  ", MarketInfo("EURJPY", MODE_SPREAD), 
      "\n", "Date: ", Month(), "-", Day(), "-", Year(), " Server Time: ", Hour(), ":", Minute(), ":", Seconds(), 
   "\n");
}